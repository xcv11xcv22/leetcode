class Solution {
 
    public HashMap<Character, String> map ;
    public StringBuilder[] strs  ;
    public ArrayList<String> abc = new ArrayList<String>();
    public List<String> letterCombinations(String digits) {
        
        if (digits.length() == 0)
            return abc;
        this.map = new HashMap<Character, String>() {{
            put('2',"abc");
            put('3',"def");
            put('4',"ghi");
            put('5',"jkl");
            put('6',"mno");
            put('7',"pqrs");
            put('8',"tuv");
            put('9',"wxyz");
        }};
        this.strs = new StringBuilder[this.map.get(digits.charAt(0)).length()];
        dfs(1, digits, -1);   
        return this.abc;
    }
    public void dfs(int istep, String digits, int index){
        
        if (istep > digits.length()){
          
            this.abc.add(this.strs[index].toString());
            return;
        }
            
        if (istep == 1){
            for(int j = 0; j < this.map.get(digits.charAt(0)).length(); j++){
         
                this.strs[j] = new StringBuilder();
                this.strs[j].append(this.map.get(digits.charAt(istep-1)).charAt(j));
                this.dfs(istep+1, digits, j);
            }
        }
        else{
            for(int j = 0; j < this.map.get(digits.charAt(istep-1)).length(); j++){
         
             
                    this.strs[index].append(this.map.get(digits.charAt(istep-1)).charAt(j));
                    this.dfs(istep+1, digits, index);
                 
                    this.strs[index].setLength(this.strs[index].length() - 1);
            }
        }
    }
}